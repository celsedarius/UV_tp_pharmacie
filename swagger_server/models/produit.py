# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Produit(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, nom_prod: str=None, dci: str=None, dosage: str=None, galenique: str=None, fabricant: str=None, conditionnement: str=None):  # noqa: E501
        """Produit - a model defined in Swagger

        :param id: The id of this Produit.  # noqa: E501
        :type id: str
        :param nom_prod: The nom_prod of this Produit.  # noqa: E501
        :type nom_prod: str
        :param dci: The dci of this Produit.  # noqa: E501
        :type dci: str
        :param dosage: The dosage of this Produit.  # noqa: E501
        :type dosage: str
        :param galenique: The galenique of this Produit.  # noqa: E501
        :type galenique: str
        :param fabricant: The fabricant of this Produit.  # noqa: E501
        :type fabricant: str
        :param conditionnement: The conditionnement of this Produit.  # noqa: E501
        :type conditionnement: str
        """
        self.swagger_types = {
            'id': str,
            'nom_prod': str,
            'dci': str,
            'dosage': str,
            'galenique': str,
            'fabricant': str,
            'conditionnement': str
        }

        self.attribute_map = {
            'id': 'id',
            'nom_prod': 'nom_prod',
            'dci': 'dci',
            'dosage': 'dosage',
            'galenique': 'galenique',
            'fabricant': 'fabricant',
            'conditionnement': 'conditionnement'
        }
        self._id = id
        self._nom_prod = nom_prod
        self._dci = dci
        self._dosage = dosage
        self._galenique = galenique
        self._fabricant = fabricant
        self._conditionnement = conditionnement

    @classmethod
    def from_dict(cls, dikt) -> 'Produit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Produit of this Produit.  # noqa: E501
        :rtype: Produit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Produit.


        :return: The id of this Produit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Produit.


        :param id: The id of this Produit.
        :type id: str
        """

        self._id = id

    @property
    def nom_prod(self) -> str:
        """Gets the nom_prod of this Produit.


        :return: The nom_prod of this Produit.
        :rtype: str
        """
        return self._nom_prod

    @nom_prod.setter
    def nom_prod(self, nom_prod: str):
        """Sets the nom_prod of this Produit.


        :param nom_prod: The nom_prod of this Produit.
        :type nom_prod: str
        """

        self._nom_prod = nom_prod

    @property
    def dci(self) -> str:
        """Gets the dci of this Produit.


        :return: The dci of this Produit.
        :rtype: str
        """
        return self._dci

    @dci.setter
    def dci(self, dci: str):
        """Sets the dci of this Produit.


        :param dci: The dci of this Produit.
        :type dci: str
        """

        self._dci = dci

    @property
    def dosage(self) -> str:
        """Gets the dosage of this Produit.


        :return: The dosage of this Produit.
        :rtype: str
        """
        return self._dosage

    @dosage.setter
    def dosage(self, dosage: str):
        """Sets the dosage of this Produit.


        :param dosage: The dosage of this Produit.
        :type dosage: str
        """

        self._dosage = dosage

    @property
    def galenique(self) -> str:
        """Gets the galenique of this Produit.


        :return: The galenique of this Produit.
        :rtype: str
        """
        return self._galenique

    @galenique.setter
    def galenique(self, galenique: str):
        """Sets the galenique of this Produit.


        :param galenique: The galenique of this Produit.
        :type galenique: str
        """

        self._galenique = galenique

    @property
    def fabricant(self) -> str:
        """Gets the fabricant of this Produit.


        :return: The fabricant of this Produit.
        :rtype: str
        """
        return self._fabricant

    @fabricant.setter
    def fabricant(self, fabricant: str):
        """Sets the fabricant of this Produit.


        :param fabricant: The fabricant of this Produit.
        :type fabricant: str
        """

        self._fabricant = fabricant

    @property
    def conditionnement(self) -> str:
        """Gets the conditionnement of this Produit.


        :return: The conditionnement of this Produit.
        :rtype: str
        """
        return self._conditionnement

    @conditionnement.setter
    def conditionnement(self, conditionnement: str):
        """Sets the conditionnement of this Produit.


        :param conditionnement: The conditionnement of this Produit.
        :type conditionnement: str
        """

        self._conditionnement = conditionnement
